# -*- coding: utf-8 -*-
"""Estrutura-Dados-Árvore-JogoDaVelha-Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aqQrAvMo7sug3EE-S15WyKeTFkvPOjwq
"""

class Node:
    def __init__(self, state, parent=None, action=None):
        self.state = state  # Representação do estado atual do jogo
        self.parent = parent  # Nó pai na árvore
        self.action = action  # Ação que levou a este estado
        self.children = []  # Lista de nós filhos

    def add_child(self, child_node):
        self.children.append(child_node)

class TicTacToeTree:
    def __init__(self):
        self.initial_state = [[' ', ' ', ' '],
                              [' ', ' ', ' '],
                              [' ', ' ', ' ']]  # Estado inicial do jogo
        self.root = Node(self.initial_state)  # Criando o nó raiz

    def generate_tree(self, node, player):
        # Gera a árvore de busca a partir de um nó
        actions = self.actions(node.state)
        for action in actions:
            new_state = self.result(node.state, action, player)
            new_node = Node(new_state, node, action)
            node.add_child(new_node)
            # Alternar entre os jogadores
            next_player = 'O' if player == 'X' else 'X'
            self.generate_tree(new_node, next_player)

    def actions(self, state):
        possible_actions = []
        for i in range(3):
            for j in range(3):
                if state[i][j] == ' ':
                    possible_actions.append((i, j))
        return possible_actions

    def result(self, state, action, player):
        new_state = [row[:] for row in state]
        new_state[action[0]][action[1]] = player
        return new_state

    def display_tree(self, node, depth=0):
        # Exibe a árvore de busca
        if node is None:
            return
        print('  ' * depth + str(node.state))
        for child in node.children:
            self.display_tree(child, depth + 1)

# Exemplo de uso:
game_tree = TicTacToeTree()
game_tree.generate_tree(game_tree.root, 'X')
game_tree.display_tree(game_tree.root)